#!/usr/bin/env bash
# You can change this to zsh if preferred

# USB Tethering Script - Share Android phone's data connection with Linux
# Combined and improved version with optimizations

# ANSI color codes for better readability
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;36m'
NC='\033[0m' # No Color

# Check if a command exists
command_exists() {
  command -v "$1" >/dev/null 2>&1
}

# Check for required dependencies
check_dependencies() {
  echo -e "${BLUE}Checking dependencies...${NC}"
  
  if ! command_exists adb; then
    echo -e "${RED}Error: ADB is not installed. Please install with:${NC}"
    echo -e "${YELLOW}sudo pacman -S android-tools${NC}"
    exit 1
  fi
  
  if ! command_exists bc; then
    echo -e "${YELLOW}Warning: 'bc' not installed. Some calculations may fail.${NC}"
    echo -e "${YELLOW}Install with: sudo pacman -S bc${NC}"
  fi
  
  echo -e "${GREEN}All critical dependencies are available.${NC}"
}

# Check for connected Android device
check_device() {
  local devices
  devices=$(adb devices | grep -v "List" | grep -v "^$")
  local device_count=$(echo "$devices" | grep "device$" | wc -l)
  
  if [[ $device_count -eq 0 ]]; then
    echo -e "${RED}No Android device detected. Please connect your phone via USB.${NC}"
    return 1
  elif [[ $device_count -gt 1 ]]; then
    echo -e "${YELLOW}Multiple devices detected. Please disconnect other devices and run again.${NC}"
    echo -e "${YELLOW}Detected devices:${NC}"
    adb devices
    return 1
  else
    local device_id=$(echo "$devices" | grep "device$" | awk '{print $1}')
    echo -e "Using device: ${GREEN}$device_id${NC}"
    export ADB_DEVICE_ARG="-s $device_id" # Set environment variable for subsequent adb commands
    return 0
  fi
}

# Get device model information
get_device_info() {
  local device_model=$(adb $ADB_DEVICE_ARG shell getprop ro.product.model 2>/dev/null | tr -d '\r')
  local android_version=$(adb $ADB_DEVICE_ARG shell getprop ro.build.version.release 2>/dev/null | tr -d '\r')
  
  if [[ -n "$device_model" ]]; then
    echo -e "${GREEN}Connected to: $device_model (Android $android_version)${NC}"
  else
    echo -e "${GREEN}Device connected${NC}"
  fi
}

# Enable tethering on the device
enable_tethering() {
  echo -e "${BLUE}Attempting to enable reverse tethering...${NC}"
  
  # Check if we can communicate with the device
  if ! adb $ADB_DEVICE_ARG shell echo "test" &> /dev/null; then
    echo -e "${YELLOW}Please check your phone and allow USB debugging if prompted.${NC}"
    sleep 3
    if ! adb $ADB_DEVICE_ARG shell echo "test" &> /dev/null; then
      echo -e "${RED}USB debugging not authorized. Please enable it on your phone.${NC}"
      return 1
    fi
  fi
  
  echo -e "${BLUE}Disabling carrier tethering check...${NC}"
  adb $ADB_DEVICE_ARG shell settings put global tether_dun_required 0
  
  echo -e "${BLUE}Enabling USB tethering mode...${NC}"
  adb $ADB_DEVICE_ARG shell svc usb setFunctions rndis
  
  echo -e "${BLUE}Configuring additional tethering settings...${NC}"
  adb $ADB_DEVICE_ARG shell settings put global tether_offload_disabled 0
  
  echo -e "${GREEN}Reverse tethering commands executed successfully.${NC}"
  echo -e "${BLUE}Checking for USB network interface...${NC}"
  
  # Wait for the interface to come up
  sleep 3
  
  local usb_ifaces=$(ip link | awk '/(usb|rndis|eth|ncm|enp)/ && !/lo/ {gsub(/:/, "", $2); print $2}')
  if [[ -z "$usb_ifaces" ]]; then
    echo -e "${RED}No USB network interface detected.${NC}"
    return 1
  else
    echo -e "${GREEN}Detected possible USB interfaces: ${usb_ifaces}${NC}"
  fi
  
  return 0
}

# List available network interfaces with numbers
list_interfaces() {
  echo -e "${BLUE}Available network interfaces:${NC}"
  ip link | grep -v lo | grep -E ': [a-z0-9]+:' | awk -F': ' '{gsub(/ /, "", $2); print NR ". " $2}'
}

# Configure selected network interface
configure_network() {
  local iface="$1"
  
  if [[ -z "$iface" ]]; then
    echo -e "${RED}No interface specified.${NC}"
    return 1
  fi
  
  # Check if interface exists
  if ! ip link show "$iface" &>/dev/null; then
    echo -e "${RED}Interface $iface does not exist.${NC}"
    return 1
  fi
  
  echo -e "${BLUE}Configuring network interface ${iface}...${NC}"
  
  # Bring up the interface if it's down
  sudo ip link set dev "$iface" up
  
  # Add IP address
  sudo ip addr add 192.168.42.100/24 dev "$iface" 2>/dev/null
  if [[ $? -ne 0 ]]; then
    echo -e "${YELLOW}Could not set IP address on $iface. Interface might already be configured or busy.${NC}"
  fi
  
  # Add default route
  sudo ip route add default via 192.168.42.1 dev "$iface" 2>/dev/null
  if [[ $? -ne 0 ]]; then
    echo -e "${YELLOW}Could not set default route via $iface. It might already exist.${NC}"
  fi
  
  # Configure DNS
  echo "nameserver 8.8.8.8" | sudo tee /etc/resolv.conf.tether > /dev/null
  echo "nameserver 8.8.4.4" | sudo tee -a /etc/resolv.conf.tether > /dev/null
  
  if [[ -f /etc/resolv.conf && ! -L /etc/resolv.conf ]]; then
    sudo cp /etc/resolv.conf /etc/resolv.conf.backup
    echo -e "${YELLOW}Backed up /etc/resolv.conf to /etc/resolv.conf.backup${NC}"
  fi
  
  sudo cp /etc/resolv.conf.tether /etc/resolv.conf
  
  echo -e "${GREEN}Network interface $iface configured.${NC}"
  echo -e "${BLUE}Testing network connectivity...${NC}"
  
  if ping -c 1 8.8.8.8 > /dev/null 2>&1; then
    echo -e "${GREEN}Network connectivity established!${NC}"
    return 0
  else
    echo -e "${RED}No network connectivity. Please check your phone's data connection and firewall settings.${NC}"
    return 1
  fi
}

# Optimize TCP parameters
optimize_tcp() {
  echo -e "${BLUE}Optimizing TCP parameters for better throughput...${NC}"
  
  sudo sysctl -w net.core.rmem_max=16777216 >/dev/null 2>&1
  sudo sysctl -w net.core.wmem_max=16777216 >/dev/null 2>&1
  sudo sysctl -w net.ipv4.tcp_rmem="4096 87380 16777216" >/dev/null 2>&1
  sudo sysctl -w net.ipv4.tcp_wmem="4096 65536 16777216" >/dev/null 2>&1
  sudo sysctl -w net.ipv4.tcp_window_scaling=1 >/dev/null 2>&1
  sudo sysctl -w net.ipv4.tcp_fastopen=3 >/dev/null 2>&1
  
  local available_cc=$(sysctl net.ipv4.tcp_available_congestion_control 2>/dev/null | cut -d= -f2)
  if [[ "$available_cc" == *"bbr"* ]]; then
    echo -e "${GREEN}Enabling BBR congestion control (often better for cellular connections)${NC}"
    sudo sysctl -w net.ipv4.tcp_congestion_control=bbr >/dev/null 2>&1
  elif [[ "$available_cc" == *"cubic"* ]]; then
    echo -e "${GREEN}Enabling CUBIC congestion control${NC}"
    sudo sysctl -w net.ipv4.tcp_congestion_control=cubic >/dev/null 2>&1
  fi
  
  sudo sysctl -w net.ipv4.tcp_timestamps=1 >/dev/null 2>&1
  sudo sysctl -w net.ipv4.tcp_sack=1 >/dev/null 2>&1
  sudo sysctl -w net.ipv4.tcp_thin_linear_timeouts=1 >/dev/null 2>&1
  sudo sysctl -w net.ipv4.tcp_early_retrans=1 >/dev/null 2>&1
  
  echo -e "${GREEN}TCP stack optimized for better throughput.${NC}"
}

# Optimize MTU for better performance
optimize_mtu() {
  local iface="$1"
  
  echo -e "${BLUE}Finding optimal MTU size for $iface...${NC}"
  local current_mtu=$(ip link show "$iface" 2>/dev/null | grep -o "mtu [0-9]*" | awk '{print $2}')
  
  if [[ -z "$current_mtu" ]]; then
    echo -e "${YELLOW}Could not determine current MTU. Using default value.${NC}"
    current_mtu=1500
  fi
  
  echo -e "${BLUE}Current MTU: $current_mtu${NC}"
  
  if ping -c 1 -W 2 8.8.8.8 >/dev/null 2>&1; then
    declare -a mtu_sizes=(1500 1472 1452 1440 1420 1400)
    local best_mtu=$current_mtu
    local best_time=99999
    
    for mtu in "${mtu_sizes[@]}"; do
      sudo ip link set dev "$iface" mtu "$mtu" 2>/dev/null
      
      local ping_result=$(ping -c 3 -s $((mtu - 28)) -M do 8.8.8.8 2>/dev/null)
      local ping_success=$?
      
      if [[ $ping_success -eq 0 ]]; then
        local ping_time=$(echo "$ping_result" | grep "avg" | awk -F '/' '{print $5}')
        
        if [[ -n "$ping_time" && "$ping_time" != "0.000" ]]; then
          echo -e "${BLUE}MTU $mtu: ${ping_time}ms${NC}"
          
          if command_exists bc && (( $(echo "$ping_time < $best_time" | bc -l 2>/dev/null) )); then
            best_time=$ping_time
            best_mtu=$mtu
          elif [[ $(echo "$ping_time < $best_time" | tr -d '.') -lt $(echo "$best_time" | tr -d '.') ]]; then
            best_time=$ping_time
            best_mtu=$mtu
          fi
        fi
      else
        echo -e "${YELLOW}MTU $mtu: Packet too large${NC}"
      fi
    done
    
    echo -e "${GREEN}Setting optimal MTU to $best_mtu for $iface${NC}"
    sudo ip link set dev "$iface" mtu "$best_mtu" 2>/dev/null
  else
    echo -e "${YELLOW}No internet connectivity. Setting default MTU to 1440 for $iface${NC}"
    sudo ip link set dev "$iface" mtu 1440 2>/dev/null
  fi
}

# Optimize network interface
optimize_interface() {
  local iface="$1"
  
  echo -e "${BLUE}Optimizing network interface ${iface}...${NC}"
  
  # Increase transmit queue length
  sudo ip link set dev "$iface" txqueuelen 1000 2>/dev/null
  
  # Use ethtool for additional optimizations if available
  if command_exists ethtool; then
    sudo ethtool --set-eee "$iface" eee off 2>/dev/null
    sudo ethtool -G "$iface" rx 4096 tx 4096 2>/dev/null
    sudo ethtool -K "$iface" tso on gso on gro on 2>/dev/null
  else
    echo -e "${YELLOW}ethtool not found. Skipping some interface optimizations.${NC}"
    echo -e "${YELLOW}Install ethtool for better performance: sudo pacman -S ethtool${NC}"
  fi
  
  # Optimize MTU for better performance
  optimize_mtu "$iface"
  
  # Prioritize tethering connection in routing table
  if ip route show default | grep -q "$iface"; then
    echo -e "${BLUE}Adjusting route metrics to prioritize tethering connection...${NC}"
    sudo ip route del default dev "$iface" 2>/dev/null
    sudo ip route add default via 192.168.42.1 dev "$iface" metric 50 2>/dev/null
  fi
  
  echo -e "${GREEN}Interface $iface optimized.${NC}"
}

# Disable USB power management
disable_usb_power_management() {
  local iface="$1"
  
  echo -e "${BLUE}Disabling USB power management to prevent throttling...${NC}"
  
  # Disable autosuspend for USB devices
  sudo sh -c "echo -1 > /sys/module/usbcore/parameters/autosuspend" 2>/dev/null
  
  # Disable power management for all USB devices
  find /sys/bus/usb/devices/*/power/control -type f -exec sudo sh -c "echo on > {}" \; 2>/dev/null
  
  # Disable power management specifically for the tethering interface
  local usb_path=$(find /sys/class/net/"$iface"/device -name power -type d 2>/dev/null)
  if [[ -n "$usb_path" ]]; then
    sudo sh -c "echo on > $usb_path/control" 2>/dev/null
    echo -e "${GREEN}Disabled power management for $iface USB device.${NC}"
  fi
  
  echo -e "${GREEN}USB power management disabled.${NC}"
}

# Optimize ADB connection
optimize_adb() {
  echo -e "${BLUE}Checking if we can optimize the ADB connection...${NC}"
  
  if ! command_exists adb; then
    echo -e "${YELLOW}ADB not found. Skipping ADB optimizations.${NC}"
    return 1
  fi
  
  if ! adb devices | grep -q "device$"; then
    echo -e "${YELLOW}No ADB connection active. Skipping ADB optimizations.${NC}"
    return 1
  fi
  
  echo -e "${GREEN}ADB connection found. Applying optimizations...${NC}"
  
  adb $ADB_DEVICE_ARG shell settings put global tether_dun_required 0 2>/dev/null
  adb $ADB_DEVICE_ARG shell setprop sys.usb.config.extra mass_storage,adb 2>/dev/null
  adb $ADB_DEVICE_ARG shell settings put global tether_offload_disabled 0 2>/dev/null
  
  echo -e "${GREEN}ADB connection optimized.${NC}"
  return 0
}

# Run a speed test
run_speed_test() {
  echo -e "${BLUE}Running speed test to measure performance...${NC}"
  
  if ! command_exists curl; then
    echo -e "${YELLOW}curl not found. Cannot run speed test.${NC}"
    return 1
  fi
  
  echo -e "${BLUE}Testing connection latency...${NC}"
  local latency_start=$(date +%s.%N)
  curl -s -o /dev/null https://www.google.com/
  local latency_end=$(date +%s.%N)
  
  if command_exists bc; then
    local latency=$(echo "$latency_end - $latency_start" | bc)
    echo -e "${GREEN}Connection latency: ${latency}s${NC}"
  else
    echo -e "${YELLOW}bc not found. Cannot calculate precise latency.${NC}"
  fi
  
  echo -e "${BLUE}Testing download throughput...${NC}"
  local dl_start=$(date +%s.%N)
  curl -s -o /dev/null http://speedtest.ftp.otenet.gr/files/test10Mb.db
  local dl_end=$(date +%s.%N)
  
  if command_exists bc; then
    local dl_duration=$(echo "$dl_end - $dl_start" | bc)
    local dl_speed=$(echo "scale=2; 10 * 8 / $dl_duration" | bc)
    echo -e "${GREEN}Download speed: ${dl_speed} Mbps${NC}"
    echo "$dl_speed" > /tmp/tether_speed_before.txt
  else
    echo -e "${YELLOW}bc not found. Cannot calculate precise speed.${NC}"
  fi
  
  return 0
}

# Compare speeds before and after optimization
compare_speeds() {
  if [[ -f /tmp/tether_speed_before.txt ]]; then
    local speed_before=$(cat /tmp/tether_speed_before.txt)
    
    echo -e "${BLUE}Running final speed test to measure improvement...${NC}"
    local dl_start=$(date +%s.%N)
    curl -s -o /dev/null http://speedtest.ftp.otenet.gr/files/test10Mb.db
    local dl_end=$(date +%s.%N)
    
    if command_exists bc; then
      local dl_duration=$(echo "$dl_end - $dl_start" | bc)
      local dl_speed=$(echo "scale=2; 10 * 8 / $dl_duration" | bc)
      local improvement=$(echo "scale=2; $dl_speed - $speed_before" | bc)
      local percent=$(echo "scale=2; ($improvement / $speed_before) * 100" | bc)
      
      echo -e "${GREEN}Before optimization: ${speed_before} Mbps${NC}"
      echo -e "${GREEN}After optimization: ${dl_speed} Mbps${NC}"
      
      if (( $(echo "$improvement > 0" | bc -l) )); then
        echo -e "${GREEN}Speed improved by ${improvement} Mbps (${percent}%)${NC}"
      else
        echo -e "${YELLOW}No improvement in speed detected.${NC}"
      fi
    else
      echo -e "${YELLOW}bc not found. Cannot calculate improvements.${NC}"
    fi
  else
    echo -e "${YELLOW}No initial speed test was run. Cannot compare speeds.${NC}"
  fi
}

# Clean up when script exits
cleanup() {
  echo -e "${BLUE}Cleaning up...${NC}"
  # Any cleanup tasks can be added here
  echo -e "${GREEN}Done!${NC}"
}

# Main function
main() {
  echo -e "${GREEN}===== USB Tethering Optimization Script =====${NC}"
  
  # Check for root privileges
  if [[ $EUID -ne 0 ]]; then
    echo -e "${YELLOW}This script needs root privileges for some operations.${NC}"
    echo -e "${YELLOW}Consider running with sudo.${NC}"
  fi
  
  # Check dependencies
  check_dependencies
  
  # Check for connected device
  if ! check_device; then
    echo -e "${YELLOW}Waiting for device to be connected...${NC}"
    adb wait-for-device
    sleep 2
    if ! check_device; then
      echo -e "${RED}Device connection failed. Exiting.${NC}"
      exit 1
    fi
  fi
  
  # Get device information
  get_device_info
  
  # Ask for user confirmation
  echo -e "${YELLOW}This script will enable reverse tethering on your connected Android device.${NC}"
  echo -e "${YELLOW}Make sure your phone has an active data connection.${NC}"
  read -p "Do you want to proceed? (y/n) " confirm
  
  if [[ "$confirm" != "y" && "$confirm" != "Y" ]]; then
    echo -e "${RED}Operation cancelled by user.${NC}"
    exit 0
  fi
  
  # Enable tethering
  if ! enable_tethering; then
    echo -e "${RED}Failed to enable tethering. Exiting.${NC}"
    exit 1
  fi
  
  # List available interfaces
  list_interfaces
  
  # Ask user to select interface by number
  echo -e "${YELLOW}Enter the number of the interface to use (usually a USB or RNDIS interface):${NC}"
  read interface_num
  
  selected_iface=$(ip link | grep -v lo | grep -E ': [a-z0-9]+:' | awk -F': ' '{gsub(/ /, "", $2); print $2}' | sed -n "${interface_num}p")
  
  if [[ -z "$selected_iface" ]]; then
    echo -e "${RED}Invalid interface selection. Exiting.${NC}"
    exit 1
  fi
  
  echo -e "${GREEN}Selected interface: $selected_iface${NC}"
  
  # Configure network
  if ! configure_network "$selected_iface"; then
    echo -e "${YELLOW}Network configuration had issues. Continuing anyway...${NC}"
  fi
  
  # Ask if user wants optimizations
  echo -e "${YELLOW}Do you want to apply performance optimizations? (y/n)${NC}"
  read optimize_confirm
  
  if [[ "$optimize_confirm" == "y" || "$optimize_confirm" == "Y" ]]; then
    # Run initial speed test
    run_speed_test
    
    # Optimize everything
    optimize_tcp
    optimize_interface "$selected_iface"
    disable_usb_power_management "$selected_iface"
    optimize_adb
    
    # Run final speed test and compare
    compare_speeds
  fi
  
  echo -e "${GREEN}===== USB Tethering Setup Complete =====${NC}"
  echo -e "${GREEN}Your computer is now using the phone's network connection.${NC}"
  echo -e "${YELLOW}To disconnect, unplug your phone or run: adb shell svc usb setFunctions${NC}"
  
  # Register cleanup function to run at exit
  trap cleanup EXIT
}

# Run the main function
main "$@"
